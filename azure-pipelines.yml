# Pipeline consists of 4 jobs
# - Build_an_Test: 
#   - Builds the project
#   - Runs all the tests
#   - creates a NuGet package
# - Publish_to_GitHubPackageRegistry: 
#   - Pushes the NuGet package to the GitHub package registry 
#   - Assumes a Service Connection was set up in the Team project running the pipeline
#   - The name of the service connection is stored in the variable gitHubPackageRegistry_ServiceConnectionName (defined below)
#   - Only runs when building a release branch or the master branch
# -Publish_to_NuGet_org
#   - Pushes the NuGet package to NuGet.org 
#   - Assumes a Service Connection for NuGet was set up in the Team project running the pipeline
#   - The name of the service connection is stored in the variable nuget_org_ServiceConnectionName (defined below)
#   - The variable nuget_org_PackageName defines which package is produced by the pipeline
#   - Whether this step runs can be controlled by the variable 'Settings.PublishToNuGetOrg' (modify at queue time when necessary):
#     - 'auto' or empty: Run when building a release branch
#     - 'false': Do not run
#     - 'true': Rn regardless of the current branch

trigger:
- master
- features/*
- release/*

variables:
  # Build settings
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true    # do not populate NuGet caches on build agents (VM will be deleted afterwards anyways)
  configuration: Release                      # the configuration (Debug/Release) to build
  dotNetSdk_Version: 2.1.505                  # the version of the .NET SDK to use
  solutionPath : src/GhBadgesSharp.sln        # The path of the solution to be buildt
  artifactsName: drop
  # GitHub package registry settings   
  gitHubPackageRegistry_ServiceConnectionName: 'GitHub Package Registry - gh-badges-sharp'  # the name of the Azure DevOps service connection to use for GitHub Package registry
  # NuGet.org settings
  nuget_org_ServiceConnectionName: 'NuGet.org - gh-badges-sharp'                            # the name of the Azure DevOps service connection to use for NuGet.org
  nuget_org_PackageName: 'Grynwald.GhBadgesSharp'                                           # the name of the package being published
  # GitHub settings
  github_ServiceConnectionName: 'GitHub: ap0llo'                                            # the name of the Azure DevOps service connection to use for creating GitHub releases
  github_repositoryName: 'ap0llo/gh-badges-sharp'                                           # the name of the github repo to create the release in

jobs:

# Main Build and test job: Builds the projects and runs all tests
- job: Build_and_Test
  pool: Hosted VS2017
  steps:

  # Check out git submodules
  - checkout: self
    clean: all
    submodules: 'true'

  # Install .NET Core SDK (version specified in the variables section)
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core SDK
    inputs:
      version: $(dotNetSdk_Version)

  # Set the build number (utilizes Nerdbank.GitVersioning)
  - task: DotNetCoreCLI@2
    displayName: Install NBGV tool    
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
  - script: nbgv cloud
    displayName: Set Version

  # Restore, Build, Test
  - task: CmdLine@2
    displayName: Restore NuGet packages
    inputs:
      script: dotnet restore $(solutionPath)
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --no-restore'  
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --no-build'
  
  # Create NuGet Package and  publish as build artifact
  - task: DotNetCoreCLI@2
    displayName: Pack NuGet package
    inputs:
      command: pack
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --output $(Build.ArtifactStagingDirectory) --no-build'  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      artifactName: $(artifactsName)

# Job to push package to GitHub package registry after build
- job: Publish_to_GitHub
  pool: Hosted VS2017
  # Only run after main build job and only if the current branch is master or a release branch
  dependsOn: 
    - Build_and_Test
    - Publish_to_NuGet_org
  variables:
      UploadedToNuGetOrg: $[dependencies.Publish_to_NuGet_org.outputs['setVars.Uploaded']]
  condition: and(succeeded('Build_and_Test'), or(eq(variables['build.sourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') ))
  steps:

  # Install .NET Core SDK (version specified in the variables section)
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core SDK
    inputs:
      version: $(dotNetSdk_Version)

  # Set the build number (utilizes Nerdbank.GitVersioning). 
  # This step is necessary as the version is requried for creating the GitHub release
  - task: DotNetCoreCLI@2
    displayName: Install NBGV tool    
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv

  - script: nbgv cloud
    displayName: Set Version

  - powershell: |
      function Set-Var($name, $value) {
        echo "Setting variable '$name' to '$value'"
        echo "##vso[task.setvariable variable=$name]$value"
      }

      $json = Invoke-Expression ".\nbgv get-version --format json" | Out-String
      $versionInfo = ConvertFrom-Json $json
      Set-Var "VersionInfo.IsPrerelease" (![String]::IsNullOrEmpty($versionInfo.PrereleaseVersion))
      Set-Var "VersionInfo.Version" ($versionInfo.NuGetPackageVersion)
    displayName: 'Set Version variables'

  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: $(artifactsName)
      downloadPath: $(Build.ArtifactStagingDirectory)

  - powershell: |
      function Set-Var($name, $value) {
        echo "Setting variable '$name' to '$value'"
        echo "##vso[task.setvariable variable=$name]$value"
      }      

      $releaseNotes = "Automatic release created by Azure DevOps."

      $uploadedToNuGetOrg = [bool]$env:UploadedToNuGetOrg

      if($uploadedToNuGetOrg) {
        $releaseNotes += "`r`n"
        $releaseNotes += "`r`n"
        $releaseNotes += "Package is also available on [NuGet.org](https://www.nuget.org/packages/$(nuget_org_PackageName)/$(VersionInfo.Version))"
        $releaseNotes += "`r`n"
      }

      Set-Var "GitHub.ReleaseNotes" $releaseNotes 
    displayName: 'Set Release Notes'

  # Create a GitHub release for the build
  - task: GithubRelease@0
    inputs:
      gitHubConnection: $(github_ServiceConnectionName)
      repositoryName: $(github_repositoryName)
      action: create
      target: $(Build.SourceVersion)
      tagSource: manual
      title: $(VersionInfo.Version)
      tag: $(VersionInfo.Version)
      releaseNotesSource: input
      releaseNotes: $(GitHub.ReleaseNotes)
      addChangeLog: true
      isPreRelease: $(VersionInfo.IsPrerelease) 

  # Upload to GitHub Package registry
  - task: NuGetCommand@2
    displayName: "Upload package"
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(gitHubPackageRegistry_ServiceConnectionName)

# Job to push package to NuGet.org after build (only for builds of release branches)
- job: Publish_to_NuGet_org
  pool: Hosted VS2017
  # Only run after main build job and only if the current branch is a release branch
  dependsOn: Build_and_Test
  condition: |
    and
    (
      succeeded('Build_and_Test'), 
      not(eq(variables['Settings.PublishToNuGetOrg'], 'false')),
      or(
        eq(variables['Settings.PublishToNuGetOrg'], 'true'),
        and
        (
          startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'),
          or
          (
            eq(variables['Settings.PublishToNuGetOrg'], ''),
            eq(variables['Settings.PublishToNuGetOrg'], 'auto')
          )
        )
      )
    )
  steps:
  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: $(artifactsName)
      downloadPath: $(Build.ArtifactStagingDirectory)
  # Upload to NuGet.org
  - task: NuGetCommand@2
    displayName: 'Upload package to NuGet.org'
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(nuget_org_ServiceConnectionName)

  - powershell: echo "##vso[task.setvariable variable=Uploaded;isOutput=true]True"
    name: setVars
    
